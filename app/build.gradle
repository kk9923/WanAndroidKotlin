apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86'//, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    //签名
    signingConfigs {
        release {
            //签名文件路径
            storeFile file(project.relativePath("wanandroid.jks"))
            storePassword "123456"
            keyAlias "123456"
            keyPassword "123456"
            v2SigningEnabled true
            v1SigningEnabled true
        }
        debug {
            //签名文件路径
            storeFile file(project.relativePath("wanandroid.jks"))
            storePassword "123456"
            keyAlias "123456"
            keyPassword "123456"
            v2SigningEnabled true
            v1SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "false"
        }
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "LOG_DEBUG", "true"
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/proguard/coroutines.pro'
    }
    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
        // incremental true
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "WanAndroid_v${defaultConfig.versionName}_(${defaultConfig.versionCode})_${releaseTime()}.apk"
                outputFileName = fileName
            }
        }
    }
}
// 强制指定版本
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("appcompat-v7")) {
                details.useVersion "28.0.0"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
   //   androidx
    implementation rootProject.ext.androidx["androidx.appcompat"]
    implementation rootProject.ext.androidx["androidx.constraintlayout"]
    implementation rootProject.ext.androidx["androidx.material"]
    implementation rootProject.ext.androidx["androidx.lifecycle-viewmodel"]
    implementation rootProject.ext.androidx["androidx.lifecycle-livedata"]
    implementation rootProject.ext.androidx["androidx.lifecycle-runtime"]
    // banner
    api rootProject.ext.dependencies["banner"]
    // glide
    api rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide"]
    // RxJava + RxAndroid
    api rootProject.ext.dependencies["rxandroid"]
    api rootProject.ext.dependencies["rxjava"]
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava2"]
    api rootProject.ext.dependencies["logging-interceptor"]
    // EventBus
    api rootProject.ext.dependencies["eventbus"]
    // SmartRefreshLayout 刷新框架
    api rootProject.ext.dependencies["refresh-core"]
    api rootProject.ext.dependencies["refresh-header"]
    api rootProject.ext.dependencies["refresh-footer"]
    // anko
 //   implementation "org.jetbrains.anko:anko:0.10.8"

    api rootProject.ext.dependencies["logger"]
    // bugly
    api rootProject.ext.dependencies["bugly"]
    api rootProject.ext.dependencies["buglynativecrashreport"]

    implementation project(path: ':base_adapter')

}
